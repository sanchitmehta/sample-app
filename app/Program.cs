using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;
using Azure.Identity;
using System.Data.SqlClient;

public class Program
{
    public static void Main(string[] args)
    {
        var credential = new DefaultAzureCredential();
        var connectionString = "Server=testserver;Database=testdb;Authentication=Active Directory Default;TrustServerCertificate=True;";

        using (var connection = new SqlConnection(connectionString))
        {
            connection.AccessToken = credential.GetToken(
                new Azure.Core.TokenRequestContext(new[] { "https://database.windows.net/.default" })
            ).Token;

            connection.Open();
            // Connection is ready to use for database operations
        }

        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            });
}