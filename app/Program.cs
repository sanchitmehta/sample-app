```csharp
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Azure.Identity;
using System.Data.SqlClient;

public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                webBuilder.UseStartup<Startup>();
            })
            .ConfigureServices((hostContext, services) =>
            {
                services.AddSingleton(serviceProvider =>
                {
                    var connectionStringBuilder = new SqlConnectionStringBuilder
                    {
                        DataSource = "testserver",
                        InitialCatalog = "testdb",
                        Authentication = SqlAuthenticationMethod.ActiveDirectoryDefault,
                        TrustServerCertificate = true
                    };

                    return new SqlConnection(connectionStringBuilder.ConnectionString);
                });
            });
}
```